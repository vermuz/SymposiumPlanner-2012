%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The RuleML-Structure Organizational Agent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Import external rules/ContractLog libraries for
% mathematical, lists and date / time computations
% and access to external data sources, e.g.
% Semantic Web ontologies, iCal Calendars etc.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


:-eval(consult('../../ContractLog/math.prova')).
:-eval(consult('../../ContractLog/datetime.prova')).
:-eval(consult('../../ContractLog/list.prova')).
:-eval(consult('../../ContractLog/update.prova')).
:-eval(consult('../../ContractLog/utils.prova')).
%:-eval(consult('../../ContractLog/calendar.prova')). % calendar API
:-eval(consult('../../ContractLog/owl.prova')).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Performative vocabulary of organizational agent
% More complex vocabularies (e.g. FIPA ACL) might be defined as Semantic Web ontologies	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
performative(request):-performative(query).
performative(query).

performative(XID,Performative):-
   performative(Performative).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Public interface definitions of the organizational agent
% Might be also defined externally, e.g. using RDF
% Format: interface(Signature, ModeDeclaration, Description)

interface(performative(Performative),performative("?"),"vocabulary of performatives of the agent").
interface(interface(Signature, ModeDeclaration, Description),interface("?","?","?"),"the public interfaces of the agent").
interface(agent(Agent),agent("?"),"the agents of RuleML-2012 STRUCT defined in an external ontology").
interface(topic(Topic),topic("?"),"the responsibility topics/domains of RuleML-2012 STRUCT").
interface(role(Role),role("?"),"the defined roles of the responsibility assignment matrix for RuleML-2012 STRUCT").
interface(assigned(Agent,Topic,Role),assigned("?","?","?"),"the defined responsibility assignment matrix for RuleML-2012 STRUCT").
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

interface(getMembersOfATechnicalGroup(TechnicalGroup,Chairs),getMembersOfATechnicalGroup("+","-"),"return all chairs for a certain Technical Group").
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Main rule for this use case: 
% 
% "Single point of entry"
%
% An external person/agent requests information from the
% RuleML-Structure.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

rcvMsg(XID,esb, From, Performative, [X|Args]) :-
	understandPerformative(XID, From, Performative, [X|Args]),
	processMessage(XID, From, Performative, [X|Args]).
rcvMsg(XID,esb, From, Performative, [X|Args]) :-
	understandPerformative(XID, From, Performative, [X|Args]),
	rcvMsg(XID,esb,Agent,no_further_answers, Payload),
	sendMsg(XID,esb,From,no_further_answers,[X|Args]),
	println(["--------------------------------------------"]), 
	println(["                 COMPLETE                   "]), 
	println(["--------------------------------------------"]).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rules for processing the message
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
	
% try to understand the performative of the message
understandPerformative(XID, From, "answer", PayLoad) :- !, fail().
understandPerformative(XID, From, "end_of_transmission", PayLoad) :- !, fail().
understandPerformative(XID, From, "no_further_answers", PayLoad) :- !,fail().  	
understandPerformative(XID, From, Performative, PayLoad) :-
	performative(Performative).
understandPerformative(XID, From, Performative, PayLoad) :-
	not(performative(Performative)),
	sendMsg(XID,esb,From,"answer", notUnderstood("performative",Performative)),
	sendMsg(XID,esb,From,"no_further_answers", PayLoad),
	fail().	



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
% look-up interface
processMessage(XID,From,Primitive,[X|Args]):-
	not(interface([X|Args],ModeDeclarations,Description)),
	sendMsg(XID,esb,From,"answer", noPublicInterface(interface([X|Args]))),
	sendMsg(XID,esb,From,"no_further_answers", [X|Args]),
	fail().

processMessage(XID,From,Primitive,[Function|Arguments]):-
   interface([Function|Arguments],ModeDeclarations,Description),
   %TODO: write rule which checks signature and mode declarations (dynamic testing)
   derive([Function,XID|Arguments]),
   sendMsg(XID,esb,From, "answer", [Function|Arguments]).
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Import Responsibility Assignment Matrix from ontology and define 
% the query functions of the organizational agent on top
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% import external ontology of responsibility assignment matrix
import("http://localhost:8080/RuleML-2012-STRUCT/RuleML-2012-Struct.owl").

% use external OWL Lite reasoner for a list of available reasoners 
% see the OWL2PROVA API
reasoner("owl").

% member of the organizing committee    
agent(XID,Agent:ruleml2012Struct_Organizing_Committee).
agent(XID,Agent):-
  sendMsg(XID,esb,"RuleML-2012-STRUCT","no_further_answers", agent(Member)),fail().

% responsibility domain of RuleML-2012-ECAI
responsibility(XID,Domain:ruleml2012Struct_Responsibility).

% role such as "responsible", "informed", "accountable" etc.
role(XID,Role:owl_ObjectProperty).

% responsibility assignment matrix
% e.g. ruleml2012Struct_TGAgent rulemlstruct_responsible rulemlstruct_Symposium
assigned(XID,Agent,Responsibility,Role):-
	import(URL),
	reasoner(Reasoner),
	rdf(URL,Reasoner,Agent,Role,Responsibility).

interface(XID,Signature,Modes,Description):-
   interface(Signature,Modes,Description).	
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
getMembersOfATechnicalGroup(XID,TechnicalGroup,technicalGroupMember(Chair)):-
	% look-up responsible agent (TG Agent)	
	assigned(XID, Agent,ruleml2012Struct_TGAgent,ruleml2012Struct_responsible),
	% query topic-track information from agent
	sendMsg(XID,esb,Agent, "query", technicalGroup(TechnicalGroup,Chairs)),
	% receive answers multiple times
	rcvMult(XID,esb,Agent, "answer", substitutions(Chairs)),
	member(Chair,Chairs).	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Auxiliary predicate for RuleML-2011@BRF extensions


% This predicate tokenizes a string as a list of keywords.
% Currently the list of delimiters are ";" "," "/" and space
% However, space has a unique behavior as well.
% e.g. the string "rule exceptions" gives two keywords
% "rule" and "exceptions", plus "rule exceptions" as a phrase
% The words that constitute the space-delimited phrase get lower weight than a normal keyword

string_to_keywords(KeywordsString,Keywords) :- 
	tokenize_list([KeywordsString,";"],ListOfKeywords1),
	clear_all_strings([",","/"],ListOfKeywords1,ListOfKeywords2),
	clear_space(ListOfKeywords2,ListOfKeywords),
	list_to_keywords(ListOfKeywords,Keywords).


% auxiliary for string_to_keywords
% take a list of strings that may contain more tokens
% inside each list-element and tokenize them using a list of delimiters.

clear_all_strings([],L,L) :- !.
clear_all_strings([H|T],L1,L) :-
	clear_strings(H,L1,L2),
	clear_all_strings(T,L2,L) .


% auxiliary for string_to_keywords
% take a list of strings that may contain more tokens
% inside each list-element and tokenize them using a specific delimiter

clear_strings(_,[],[]) :- !.
clear_strings(Sep,[H1|T1],L2) :-
	tokenize_list([H1,Sep],H2),
	clear_strings(Sep,T1,T2),
	append(H2,T2,L2).


% auxiliary for string_to_keywords
% take a list of strings that may contain more tokens
% inside each list-element and tokenize them using space as a delimiter

clear_space([],[]) :- !.
clear_space([H1|T1],[H2|T2]) :-
	tokenize_list([H1," "],[H2]), !,
	clear_space(T1,T2).
clear_space([H1|T1],L2) :-
	tokenize_list([H1," "],L),
	% The words that constitute the space-delimited phrase get lower weight
	% than a normal keyword
	infuse_weights(L,L1), 
	clear_space(T1,T2),
	append(L1,[H1|T2],L2).
	



% auxiliary for string_to_keywords
% Transform a list of strings into a list of keywords
% according to the keys/2 complex term requiored by the corresponding OOJDrew predicate
% Notice that when a keyword has a weight (due to space-delimited phrases)
% then the complex term is keys/3
% When no weight exists, default 1 is assumed in the corresponding PA (program chair)

list_to_keywords([],nil) :- !.
list_to_keywords([""|T],Rest) :- !,
	list_to_keywords(T,Rest).
list_to_keywords([weight("",W)|T],Rest) :- !,
	list_to_keywords(T,Rest).
list_to_keywords([weight(K,W)|T],keys(K,W,Rest)) :-
	isa_string(K), !,
	list_to_keywords(T,Rest).
list_to_keywords([K|T],keys(K,Rest)) :-
	isa_string(K), !,
	list_to_keywords(T,Rest).
list_to_keywords([weight(K,W)|T],keys(Key,W,Rest)) :- !,
	K1 = K.trim(),
	concat(["string:",K1],Key),
	list_to_keywords(T,Rest).
list_to_keywords([K|T],keys(Key,Rest)) :-
	K1 = K.trim(),
	concat(["string:",K1],Key),
	list_to_keywords(T,Rest).


% auxiliary for string_to_keywords
% check if a string contains the "string:" type declaration
% necessary for OOJDrew

isa_string(S) :-
	tokenize_list([S,":"],["string"|_]).


% When there is a space-delimited phrase
% each word becomes a keyword as well with a lower weight
% The weight of each word is 1/N, where N is the number
% of the words in the phrase

infuse_weights(L,L1) :-
	size(L,N),
	math_div1(1, N, W),
	concat(["real:",W],W1),
	infuse_weights_aux(W1,L,L1).


% auxiliary for infuse_weights/2
% for each word in the list construct a list with
% weight/2 complex terms that carry both the word an its weight

infuse_weights_aux(_,[],[]).
infuse_weights_aux(W,[H|T],[weight(H,W)|T1]) :-
	infuse_weights_aux(W,T,T1).



	











